/*****************************************************************************************************************
*****************************************************************************************************************/

#pragma once

#include <Windows.h>

namespace Common
{
	namespace Error
	{
		class CHttpError
		{
		public:
			enum	ErrorCode
			{
				QUEUE_FULL										= 0,

				WINHTTP_OUT_OF_HANDLES							= 12001,
				WINHTTP_TIMEOUT									= 12002,
				WINHTTP_INTERNAL_ERROR							= 12004,
				WINHTTP_INVALID_URL								= 12005,
				WINHTTP_UNRECOGNIZED_SCHEME						= 12006,
				WINHTTP_NAME_NOT_RESOLVED						= 12007,
				WINHTTP_INVALID_OPTION							= 12009,
				WINHTTP_OPTION_NOT_SETTABLE						= 12011,
				WINHTTP_SHUTDOWN								= 12012,
				WINHTTP_LOGIN_FAILURE							= 12015,
				WINHTTP_OPERATION_CANCELLED						= 12017,
				WINHTTP_INCORRECT_HANDLE_TYPE					= 12018,
				WINHTTP_INCORRECT_HANDLE_STATE					= 12019,
				WINHTTP_CANNOT_CONNECT							= 12029,
				WINHTTP_CONNECTION_ERROR						= 12030,
				WINHTTP_RESEND_REQUEST							= 12032,
				WINHTTP_SECURE_CERT_DATE_INVALID				= 12037,
				WINHTTP_SECURE_CERT_CN_INVALID					= 12038,
				WINHTTP_CLIENT_AUTH_CERT_NEEDED					= 12044,
				WINHTTP_SECURE_INVALID_CA						= 12045,
				WINHTTP_SECURE_CERT_REV_FAILED					= 12057,
				WINHTTP_CANNOT_CALL_BEFORE_OPEN					= 12100,
				WINHTTP_CANNOT_CALL_BEFORE_SEND					= 12101,
				WINHTTP_CANNOT_CALL_AFTER_SEND					= 12102,
				WINHTTP_CANNOT_CALL_AFTER_OPEN					= 12103,
				WINHTTP_HEADER_NOT_FOUND						= 12150,
				WINHTTP_INVALID_SERVER_RESPONSE					= 12152,
				WINHTTP_INVALID_QUERY_REQUEST					= 12154,
				WINHTTP_HEADER_ALREADY_EXISTS					= 12155,
				WINHTTP_REDIRECT_FAILED							= 12156,
				WINHTTP_SECURE_CHANNEL_ERROR					= 12157,
				WINHTTP_BAD_AUTO_PROXY_SCRIPT					= 12166,
				WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT				= 12167,
				WINHTTP_SECURE_INVALID_CERT						= 12169,
				WINHTTP_SECURE_CERT_REVOKED						= 12170,
				WINHTTP_NOT_INITIALIZED							= 12172,
				WINHTTP_SECURE_FAILURE							= 12175,
				WINHTTP_AUTO_PROXY_SERVICE_ERROR				= 12178,
				WINHTTP_SECURE_CERT_WRONG_USAGE					= 12179,
				WINHTTP_AUTODETECTION_FAILED					= 12180,
				WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW	= 12183,
				WINHTTP_HEADER_COUNT_EXCEEDED					= 12181,
				WINHTTP_HEADER_SIZE_OVERFLOW					= 12182,
				WINHTTP_RESPONSE_DRAIN_OVERFLOW					= 12184,
				WINHTTP_PROXY_AUTH_REQUIRED						= 12185,

				NOT_ENOUGH_MEMORY								= ERROR_NOT_ENOUGH_MEMORY,
				INSUFFICIENT_BUFFER								= ERROR_INSUFFICIENT_BUFFER,
				INVALID_HANDLE									= ERROR_INVALID_HANDLE,
				NO_MORE_FILES									= ERROR_NO_MORE_FILES,
				NO_MORE_ITEMS									= ERROR_NO_MORE_ITEMS,
				NOT_SUPPORTED									= ERROR_NOT_SUPPORTED,
			};

			static LPCTSTR GetErrorMessage( DWORD dwErrorCode )
			{
				switch( dwErrorCode )
				{
				case QUEUE_FULL:
					return "QUEUE_FULL";

				case WINHTTP_OUT_OF_HANDLES:
					return "WINHTTP_OUT_OF_HANDLES";

				case WINHTTP_TIMEOUT:
					return "WINHTTP_TIMEOUT";

				case WINHTTP_INTERNAL_ERROR:
					return "WINHTTP_INTERNAL_ERROR";

				case WINHTTP_INVALID_URL:
					return "WINHTTP_INVALID_URL";

				case WINHTTP_UNRECOGNIZED_SCHEME:
					return "WINHTTP_UNRECOGNIZED_SCHEME";

				case WINHTTP_NAME_NOT_RESOLVED:
					return "WINHTTP_NAME_NOT_RESOLVED";

				case WINHTTP_INVALID_OPTION:
					return "WINHTTP_INVALID_OPTION";

				case WINHTTP_OPTION_NOT_SETTABLE:
					return "WINHTTP_OPTION_NOT_SETTABLE";

				case WINHTTP_SHUTDOWN:
					return "WINHTTP_SHUTDOWN";

				case WINHTTP_LOGIN_FAILURE:
					return "WINHTTP_LOGIN_FAILURE";

				case WINHTTP_OPERATION_CANCELLED:
					return "WINHTTP_OPERATION_CANCELLED";

				case WINHTTP_INCORRECT_HANDLE_TYPE:
					return "WINHTTP_INCORRECT_HANDLE_TYPE";

				case WINHTTP_INCORRECT_HANDLE_STATE:
					return "WINHTTP_INCORRECT_HANDLE_STATE";

				case WINHTTP_CANNOT_CONNECT:
					return "WINHTTP_CANNOT_CONNECT";

				case WINHTTP_CONNECTION_ERROR:
					return "WINHTTP_CONNECTION_ERROR";

				case WINHTTP_RESEND_REQUEST:
					return "WINHTTP_RESEND_REQUEST";

				case WINHTTP_SECURE_CERT_DATE_INVALID:
					return "WINHTTP_SECURE_CERT_DATE_INVALID";

				case WINHTTP_SECURE_CERT_CN_INVALID:
					return "WINHTTP_SECURE_CERT_CN_INVALID";

				case WINHTTP_CLIENT_AUTH_CERT_NEEDED:
					return "WINHTTP_CLIENT_AUTH_CERT_NEEDED";

				case WINHTTP_SECURE_INVALID_CA:
					return "WINHTTP_SECURE_INVALID_CA";

				case WINHTTP_SECURE_CERT_REV_FAILED:
					return "WINHTTP_SECURE_CERT_REV_FAILED";

				case WINHTTP_CANNOT_CALL_BEFORE_OPEN:
					return "WINHTTP_CANNOT_CALL_BEFORE_OPEN";

				case WINHTTP_CANNOT_CALL_BEFORE_SEND:
					return "WINHTTP_CANNOT_CALL_BEFORE_SEND";

				case WINHTTP_CANNOT_CALL_AFTER_SEND:
					return "WINHTTP_CANNOT_CALL_AFTER_SEND";

				case WINHTTP_CANNOT_CALL_AFTER_OPEN:
					return "WINHTTP_CANNOT_CALL_AFTER_OPEN";

				case WINHTTP_HEADER_NOT_FOUND:
					return "WINHTTP_HEADER_NOT_FOUND";

				case WINHTTP_INVALID_SERVER_RESPONSE:
					return "WINHTTP_INVALID_SERVER_RESPONSE";

				case WINHTTP_INVALID_QUERY_REQUEST:
					return "WINHTTP_INVALID_QUERY_REQUEST";

				case WINHTTP_HEADER_ALREADY_EXISTS:
					return "WINHTTP_HEADER_ALREADY_EXISTS";

				case WINHTTP_REDIRECT_FAILED:
					return "WINHTTP_REDIRECT_FAILED";

				case WINHTTP_SECURE_CHANNEL_ERROR:
					return "WINHTTP_SECURE_CHANNEL_ERROR";

				case WINHTTP_BAD_AUTO_PROXY_SCRIPT:
					return "WINHTTP_BAD_AUTO_PROXY_SCRIPT";

				case WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT:
					return "WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT";

				case WINHTTP_SECURE_INVALID_CERT:
					return "WINHTTP_SECURE_INVALID_CERT";

				case WINHTTP_SECURE_CERT_REVOKED:
					return "WINHTTP_SECURE_CERT_REVOKED";

				case WINHTTP_NOT_INITIALIZED:
					return "WINHTTP_NOT_INITIALIZED";

				case WINHTTP_SECURE_FAILURE:
					return "WINHTTP_SECURE_FAILURE";

				case WINHTTP_AUTO_PROXY_SERVICE_ERROR:
					return "WINHTTP_AUTO_PROXY_SERVICE_ERROR";

				case WINHTTP_SECURE_CERT_WRONG_USAGE:
					return "WINHTTP_SECURE_CERT_WRONG_USAGE";

				case WINHTTP_AUTODETECTION_FAILED:
					return "WINHTTP_AUTODETECTION_FAILED";

				case WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW:
					return "WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW";

				case WINHTTP_HEADER_COUNT_EXCEEDED:
					return "WINHTTP_HEADER_COUNT_EXCEEDED";

				case WINHTTP_HEADER_SIZE_OVERFLOW:
					return "WINHTTP_HEADER_SIZE_OVERFLOW";

				case WINHTTP_RESPONSE_DRAIN_OVERFLOW:
					return "WINHTTP_RESPONSE_DRAIN_OVERFLOW";

				case WINHTTP_PROXY_AUTH_REQUIRED:
					return "WINHTTP_PROXY_AUTH_REQUIRED";

				case NOT_ENOUGH_MEMORY:
					return "NOT_ENOUGH_MEMORY";

				case INSUFFICIENT_BUFFER:
					return "INSUFFICIENT_BUFFER";

				case INVALID_HANDLE:
					return "INVALID_HANDLE";

				case NO_MORE_FILES:
					return "NO_MORE_FILES";

				case NO_MORE_ITEMS:
					return "NO_MORE_ITEMS";

				case NOT_SUPPORTED:
					return "NOT_SUPPORTED";

				default:
					return "UNDEFINE_ERROR";

				}// switch( dwErrorCode )

			}// static LPCTSTR GetErrorMessage( DWORD dwErrorCode )

		};// class CHttpError

	}// namespace Error

}// namespace Command